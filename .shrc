oldpath="$PATH"
export PATH="/usr/local/bin:$PATH"

if [ -x "$(which virtualenv)" ]; then
    # virtualenv should use Distribute instead of legacy setuptools
    export VIRTUALENV_DISTRIBUTE=true
    # Centralized location for new virtual environments
    export PIP_VIRTUALENV_BASE=$HOME/virtualenvs
    # pip should only run if there is a virtualenv currently activated
    export PIP_REQUIRE_VIRTUALENV=true
    # cache pip-installed packages to avoid re-downloading
    export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache
fi


if [ -f ~/openrc ]; then
    . ~/openrc
fi


export PATH="$oldpath"

export HOMEBREW_NO_AUTO_UPDATE=1

# don't create core files
ulimit -c 0

if [ -d "$HOME/.rbenv" ]; then
    export PATH="$HOME/.rbenv/bin:$PATH"
fi

if command -v rbenv >/dev/null ; then
    eval "$(rbenv init -)"
fi

if [[ -d "$HOME/.pyenv" ]] && command -v pyenv >/dev/null; then
    export PYENV_ROOT="$HOME/.pyenv"

    eval "$(pyenv init -)"

    if pyenv virtualenv --help >/dev/null 2>&1; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

if [ "$SHLVL" = "1" ]; then
    if perl -e 'use local::lib' >/dev/null 2>&1 || perl "-I$HOME/perl5/lib/perl5" -e 'use local::lib' >/dev/null 2>&1 ; then
        eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)"  # TODO not whitespace safe
    else
        echo 'please install perl local::lib (https://metacpan.org/pod/local::lib)' >&2
        export PATH="$HOME/perl5/bin:$PATH"
        PERL_MB_OPT="--install_base \"$HOME/perl5\""; export PERL_MB_OPT;
        PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"; export PERL_MM_OPT;
        export PERLLIB="$HOME/perl5/lib/perl5:$PERLLIB"
    fi
fi

if [[ -n "$(type -p go)" && -d ~/go ]]; then
    export GOPATH=~/go;
    #[[ "$SHLVL" = "1" ]] && export PATH="$GOPATH/bin:$PATH"
fi

if [[ -d ~/.krew || -n "$KREW_ROOT" ]]; then
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi
    
jdk_switch() {
    if [ -z "$1" ]; then
        echo "usage: jdk_switch <java home directory name>" >&2;
        return;
    fi

    jh="$1"
    if [ ! -d "$jh" -o ! -x "$jh/bin/java" ]; then
        jh="/usr/local/$jh"
    fi

    if [ ! -d "$jh" -o ! -x "$jh/bin/java" ]; then
        echo "java home directory not found: $jh" >&2;
        return;
    fi

    echo "switching JAVA_HOME to $jh" >&2
    # try to remove the current $JAVA_HOME from $PATH
    if [[ -x /usr/bin/ruby ]] && [[ -n "$JAVA_HOME" ]]; then  # need to use the native ruby binary, not any rbenv shim, to get an unchanged $PATH in the script
        export PATH=$(/usr/bin/ruby -e "print ENV['PATH'].gsub(\"#{ENV['JAVA_HOME']}/bin:\", '')")
    fi
    export JAVA_HOME="$jh"
    export PATH="$jh/bin:$PATH"
}

export PATH="$HOME/bin:$PATH"

if [[ -d "$HOME/gnubin" ]]; then
    export PATH="$HOME/gnubin:$PATH"
fi

[[ -f ~/.tmux-session.load ]] && source ~/.tmux-session.load

# added by travis gem
[ -f /Users/oklischat/.travis/travis.sh ] && source /Users/oklischat/.travis/travis.sh

if [[ -n "$ZSH_NAME" ]]; then
    _shell=zsh
else
    _shell=bash
fi

if [[ -f "/usr/local/opt/kube-ps1/share/kube-ps1.sh" ]]; then
    . "/usr/local/opt/kube-ps1/share/kube-ps1.sh"
    PS1='$(kube_ps1)'$PS1
fi

if [[ -x "$(which kubectl)" ]]; then
    alias k=kubectl
    alias kns=kubens
    if [[ -x "$(which adminkubectl)" ]]; then
        alias ak=adminkubectl
        alias akns=adminkubens
    fi
    source <(kubectl completion $_shell)
fi

if [[ -S $SSH_AUTH_SOCK ]]; then
    ln -sf $SSH_AUTH_SOCK "$HOME/.ssh/auth_sock"
fi

if [[ -f "$HOME/.cargo/env" ]]; then
    . "$HOME/.cargo/env"
fi
